<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ASC.Web.Core</name>
    </assembly>
    <members>
        <member name="T:ASC.Web.Core.Files.DocumentService">
            <summary>
            Class service connector
            </summary>
        </member>
        <member name="F:ASC.Web.Core.Files.DocumentService.Timeout">
            <summary>
            Timeout to request conversion
            </summary>
        </member>
        <member name="F:ASC.Web.Core.Files.DocumentService.MaxTry">
            <summary>
            Number of tries request conversion
            </summary>
        </member>
        <member name="M:ASC.Web.Core.Files.DocumentService.GenerateRevisionId(System.String)">
            <summary>
            Translation key to a supported form.
            </summary>
            <param name="expectedKey">Expected key</param>
            <returns>Supported key</returns>
        </member>
        <member name="M:ASC.Web.Core.Files.DocumentService.GetConvertedUri(System.String,System.String,System.String,System.String,System.String,System.String,System.String,ASC.Web.Core.Files.DocumentService.ThumbnailData,ASC.Web.Core.Files.DocumentService.SpreadsheetLayout,System.Boolean,System.String,System.String@)">
            <summary>
            The method is to convert the file to the required format
            </summary>
            <param name="documentConverterUrl">Url to the service of conversion</param>
            <param name="documentUri">Uri for the document to convert</param>
            <param name="fromExtension">Document extension</param>
            <param name="toExtension">Extension to which to convert</param>
            <param name="documentRevisionId">Key for caching on service</param>
            <param name="password">Password</param>
            <param name="region">Four letter language codes</param>
            <param name="thumbnail">Thumbnail settings</param>
            <param name="spreadsheetLayout"></param>
            <param name="isAsync">Perform conversions asynchronously</param>
            <param name="signatureSecret">Secret key to generate the token</param>
            <param name="convertedDocumentUri">Uri to the converted document</param>
            <returns>The percentage of completion of conversion</returns>
            <example>
            string convertedDocumentUri;
            GetConvertedUri("http://helpcenter.teamlab.com/content/GettingStarted.pdf", ".pdf", ".docx", "469971047", false, out convertedDocumentUri);
            </example>
            <exception>
            </exception>
        </member>
        <member name="M:ASC.Web.Core.Files.DocumentService.CommandRequest(System.String,ASC.Web.Core.Files.DocumentService.CommandMethod,System.String,System.String,System.String[],ASC.Web.Core.Files.DocumentService.MetaData,System.String)">
            <summary>
            Request to Document Server with command
            </summary>
            <param name="documentTrackerUrl">Url to the command service</param>
            <param name="method">Name of method</param>
            <param name="documentRevisionId">Key for caching on service, whose used in editor</param>
            <param name="callbackUrl">Url to the callback handler</param>
            <param name="users">users id for drop</param>
            <param name="meta">file meta data for update</param>
            <param name="signatureSecret">Secret key to generate the token</param>
            <returns>Response</returns>
        </member>
        <member name="M:ASC.Web.Core.Files.DocumentService.GetResponseUri(System.String,System.String@)">
            <summary>
            Processing document received from the editing service
            </summary>
            <param name="jsonDocumentResponse">The resulting json from editing service</param>
            <param name="responseUri">Uri to the converted document</param>
            <returns>The percentage of completion of conversion</returns>
        </member>
        <member name="T:ASC.Web.Core.Helpers.ResourceEnumConverter">
            <summary>
            Defines a type converter for enum values that converts enum values to 
            and from string representations using resources
            </summary>
            <remarks>
            This class makes localization of display values for enums in a project easy.  Simply
            derive a class from this class and pass the ResourceManagerin the constructor.  
            
            Then define the enum values in the resource editor.   The names of
            the resources are simply the enum value prefixed by the enum type name with an
            underscore separator eg MyEnum_MyValue.  You can then use the TypeConverter attribute
            to make the LocalizedEnumConverter the default TypeConverter for the enums in your
            project.
            </remarks>
        </member>
        <member name="M:ASC.Web.Core.Helpers.ResourceEnumConverter.GetLookupTable(System.Globalization.CultureInfo)">
            <summary>
            Get the lookup table for the given culture (creating if necessary)
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:ASC.Web.Core.Helpers.ResourceEnumConverter.GetValueText(System.Globalization.CultureInfo,System.Object)">
            <summary>
            Return the text to display for a simple value in the given culture
            </summary>
            <param name="culture">The culture to get the text for</param>
            <param name="value">The enum value to get the text for</param>
            <returns>The localized text</returns>
        </member>
        <member name="M:ASC.Web.Core.Helpers.ResourceEnumConverter.IsSingleBitValue(System.UInt64)">
            <summary>
            Return true if the given value is can be represented using a single bit
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ASC.Web.Core.Helpers.ResourceEnumConverter.GetFlagValueText(System.Globalization.CultureInfo,System.Object)">
            <summary>
            Return the text to display for a flag value in the given culture
            </summary>
            <param name="culture">The culture to get the text for</param>
            <param name="value">The flag enum value to get the text for</param>
            <returns>The localized text</returns>
        </member>
        <member name="M:ASC.Web.Core.Helpers.ResourceEnumConverter.GetValue(System.Globalization.CultureInfo,System.String)">
            <summary>
            Return the Enum value for a simple (non-flagged enum)
            </summary>
            <param name="culture">The culture to convert using</param>
            <param name="text">The text to convert</param>
            <returns>The enum value</returns>
        </member>
        <member name="M:ASC.Web.Core.Helpers.ResourceEnumConverter.GetFlagValue(System.Globalization.CultureInfo,System.String)">
            <summary>
            Return the Enum value for a flagged enum
            </summary>
            <param name="culture">The culture to convert using</param>
            <param name="text">The text to convert</param>
            <returns>The enum value</returns>
        </member>
        <member name="M:ASC.Web.Core.Helpers.ResourceEnumConverter.#ctor(System.Type,System.Resources.ResourceManager)">
            <summary>
            Create a new instance of the converter using translations from the given resource manager
            </summary>
            <param name="type"></param>
            <param name="resourceManager"></param>
        </member>
        <member name="M:ASC.Web.Core.Helpers.ResourceEnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert string values to enum values
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ASC.Web.Core.Helpers.ResourceEnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert the enum value to a string
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:ASC.Web.Core.Helpers.ResourceEnumConverter.ConvertToString(System.Enum)">
            <summary>
            Convert the given enum value to string using the registered type converter
            </summary>
            <param name="value">The enum value to convert to string</param>
            <returns>The localized string value for the enum</returns>
        </member>
        <member name="M:ASC.Web.Core.Helpers.ResourceEnumConverter.GetValues(System.Type,System.Globalization.CultureInfo)">
            <summary>
            Return a list of the enum values and their associated display text for the given enum type
            </summary>
            <param name="enumType">The enum type to get the values for</param>
            <param name="culture">The culture to get the text for</param>
            <returns>
            A list of KeyValuePairs where the key is the enum value and the value is the text to display
            </returns>
            <remarks>
            This method can be used to provide localized binding to enums in ASP.NET applications.   Unlike 
            windows forms the standard ASP.NET controls do not use TypeConverters to convert from enum values
            to the displayed text.   You can bind an ASP.NET control to the list returned by this method by setting
            the DataValueField to "Key" and theDataTextField to "Value". 
            </remarks>
        </member>
        <member name="M:ASC.Web.Core.Helpers.ResourceEnumConverter.GetValues(System.Type)">
            <summary>
            Return a list of the enum values and their associated display text for the given enum type in the current UI Culture
            </summary>
            <param name="enumType">The enum type to get the values for</param>
            <returns>
            A list of KeyValuePairs where the key is the enum value and the value is the text to display
            </returns>
            <remarks>
            This method can be used to provide localized binding to enums in ASP.NET applications.   Unlike 
            windows forms the standard ASP.NET controls do not use TypeConverters to convert from enum values
            to the displayed text.   You can bind an ASP.NET control to the list returned by this method by setting
            the DataValueField to "Key" and theDataTextField to "Value". 
            </remarks>
        </member>
        <member name="T:ASC.Web.Core.Users.ImageHelper">
            <summary>
            Helper class for manipulating images.
            </summary>
        </member>
        <member name="M:ASC.Web.Core.Users.ImageHelper.RotateImageByExifOrientationData(System.Byte[],System.Boolean)">
            <summary>
            Rotate the given image byte array according to Exif Orientation data
            </summary>
            <param name="data">source image byte array</param>
            <param name="updateExifData">set it to TRUE to update image Exif data after rotation (default is TRUE)</param>
            <returns>The rotated image byte array. If no rotation occurred, source data will be returned.</returns>
        </member>
        <member name="M:ASC.Web.Core.Users.ImageHelper.RotateImageByExifOrientationData(System.String,System.String,System.Drawing.Imaging.ImageFormat,System.Boolean)">
            <summary>
            Rotate the given image file according to Exif Orientation data
            </summary>
            <param name="sourceFilePath">path of source file</param>
            <param name="targetFilePath">path of target file</param>
            <param name="targetFormat">target format</param>
            <param name="updateExifData">set it to TRUE to update image Exif data after rotation (default is TRUE)</param>
            <returns>The RotateFlipType value corresponding to the applied rotation. If no rotation occurred, RotateFlipType.RotateNoneFlipNone will be returned.</returns>
        </member>
        <member name="M:ASC.Web.Core.Users.ImageHelper.RotateImageByExifOrientationData(System.Drawing.Image,System.Boolean)">
            <summary>
            Rotate the given bitmap according to Exif Orientation data
            </summary>
            <param name="img">source image</param>
            <param name="updateExifData">set it to TRUE to update image Exif data after rotation (default is TRUE)</param>
            <returns>The RotateFlipType value corresponding to the applied rotation. If no rotation occurred, RotateFlipType.RotateNoneFlipNone will be returned.</returns>
        </member>
        <member name="M:ASC.Web.Core.Users.ImageHelper.GetRotateFlipTypeByExifOrientationData(System.Int32)">
            <summary>
            Return the proper System.Drawing.RotateFlipType according to given orientation EXIF metadata
            </summary>
            <param name="orientation">Exif "Orientation"</param>
            <returns>the corresponding System.Drawing.RotateFlipType enum value</returns>
        </member>
        <member name="M:ASC.Web.Core.WhiteLabel.TenantWhiteLabelSettings.GetWhitelabelLogoData(ASC.Web.Core.WhiteLabel.WhiteLabelLogoTypeEnum,System.Boolean)">
            <summary>
            Get logo stream or null in case of default whitelabel
            </summary>
        </member>
        <member name="M:ASC.Web.Core.WhiteLabel.TenantInfoSettings.GetStorageLogoData">
            <summary>
            Get logo stream or null in case of default logo
            </summary>
        </member>
        <member name="M:ASC.Web.Core.WhiteLabel.TenantLogoManager.GetWhitelabelMailLogo">
            <summary>
            Get logo stream or null in case of default logo
            </summary>
        </member>
        <member name="M:ASC.Web.Core.ModuleManagement.Common.ItemSearchControl.CheckEmptyValue(System.String)">
            <summary>
            This method needs to keep item height
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:ASC.Web.Core.ModuleManagement.Common.SearchResultItem.URL">
            <summary>
            Absolute URL
            </summary>
        </member>
        <member name="P:ASC.Web.Core.ModuleManagement.Common.ISearchHandlerEx.Logo">
            <summary>
            Interface log 
            </summary>
        </member>
        <member name="P:ASC.Web.Core.ModuleManagement.Common.ISearchHandlerEx.SearchName">
            <summary>
            Search display name
            <remarks>Ex: "forum search"</remarks>
            </summary>
        </member>
        <member name="M:ASC.Web.Core.ModuleManagement.Common.ISearchHandlerEx.Search(System.String)">
            <summary>
            Do search
            </summary>
            <param name="text">Search text</param>
            <returns>If nothing found - empty array</returns>
        </member>
        <member name="M:ASC.Core.Users.UserInfoExtension.GetUserProfilePageURLGeneral(ASC.Core.Users.UserInfo)">
            <summary>
            return absolute profile link
            </summary>
            <param name="userInfo"></param>
            <returns></returns>
        </member>
        <member name="M:System.TimeZoneExtension.GetOffset(System.TimeZoneInfo,System.Boolean,System.DateTime)">
            <summary>
            Get utc offset
            </summary>
            <param name="timeZone">timeZone</param>
            <param name="baseOffset">return BaseUtcOffset</param>
            <param name="dateTime">return GetUtcOffset(dateTime ?? DateTime.UtcNow)</param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtension.ReplaceSingleQuote(System.String)">
            <summary>
            Replace ' on ′
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
    </members>
</doc>
